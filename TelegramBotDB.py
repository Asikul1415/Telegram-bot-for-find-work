import telebot
from telebot import types
import sqlite3
from datetime import*


	
bot = telebot.TeleBot("TOKEN")

db = sqlite3.connect("DB.db",check_same_thread=False)
sql = db.cursor()


type_of_work_default = ""
city_default = "" 
specialization_default = ""
desired_salary_default = 0
knowlege_of_english_default = 0
auto_mailing_default = 1 #automatic
message_frequensy_default = 1 #per day
number_of_orders_default = 3 # per message
subcription_status_default = 0
subcription_until_status_default = 0
trial_subcription_activation_default = 0








#START
@bot.message_handler(commands=["start"])
def send_welcome(message):
	bot.send_message(message.chat.id, f"""–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}. 
	–Ø –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞–º —ç–∫–æ–Ω–æ–º–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ –ø–æ–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –∏ –∑–∞–∫–∞–∑–æ–≤
	\n–£—á—Ç–∏ —è —Ä–∞–±–æ—Ç–∞—é –Ω–µ –∑–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –∞ –∑–∞ –Ω–µ–±–æ–ª—å—à—É—é –ø–ª–∞—Ç—É. 
	–ö–æ–Ω–µ—á–Ω–æ —è –¥–∞–º —Ç–µ–±–µ —Å–Ω–∞—á–∞–ª–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–Ω–æ–π, 
	–∞ –¥–∞–ª—å—à–µ —Å–∞–º —Ä–µ—à–∞–π —á—Ç–æ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å, –ø–ª–∞—Ç–∏—Ç—å –∏–ª–∏ –Ω–µ—Ç.""")

	#id, user_id, subcription_status, subcription_until, auto_mailing_status, message_frequensy, number_of_orders
	#type_of_work, city, specialization, desired_salary, knowlege_of_english
	sql.execute("SELECT * FROM users WHERE user_id = ?",(message.chat.id,))
	if sql.fetchone() == None:
		sql.execute("INSERT INTO users VALUES (NULL, ?,?,?,?,?,?,?,?,?,?,?,?)",(message.chat.id,subcription_status_default,
		subcription_until_status_default,auto_mailing_default,message_frequensy_default,number_of_orders_default,
		type_of_work_default,city_default,specialization_default,desired_salary_default,knowlege_of_english_default,trial_subcription_activation_default))
		db.commit()
	main_menu(message)

def set_subcription_when_paying(operation_status,message):
	if operation_status == 'success':
		today = date.today()
		sql.execute("UPDATE users SET subcription_until == ? WHERE user_id = ?",((today+timedelta(days=30)).strftime("%d%m%Y"),message.chat.id))
		sql.execute("UPDATE users SET subcription_status == ? WHERE user_id = ?",(1,message.chat.id))
		db.commit()
		until = str(sql.execute('SELECT * FROM users WHERE user_id = ?',(message.chat.id,)).fetchone()[3])
		until_text = date(day = int(until[0:2]),month = int(until[2:4]),year=int(until[4:8])).strftime("%d-%m-%Y")
		bot.send_message(message.chat.id,'–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ ' + str(until_text))

def subscription_expiration(message):
	today = int(date.today())
	if today < sql.execute("SELECT * FROM users WHERE user_id = ?",(message.chat.id,)).fetchone()[3]:
		pass
	else:
		sql.execute("UPDATE users SET subcription_until = ? WHERE user_id = ?",(0,message.chat.id))
		sql.execute("UPDATE users SET subcription_status = ? WHERE user_id = ?",(0,message.chat.id))
		db.commit()
		
def check_subcription_status(call):
	if sql.execute("SELECT * FROM users WHERE user_id = ?",(call.message.chat.id,)).fetchone()[2] == 1:
		return True
	else:
		return False

def find_orders():
	pass


#MAIN MENU
@bot.message_handler(commands=["menu"])
def main_menu(message):
	markup = types.InlineKeyboardMarkup()
	
	markup.add(types.InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å üíª",callback_data="profile_button" ))
	markup.add(types.InlineKeyboardButton("–ü–æ–∏—Å–∫ –∑–∞–∫–∑–æ–≤/–≤–∞–∫–∞–Ω—Å–∏–π",callback_data="find_orders_button"))
	markup.add(types.InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ üõ†Ô∏è",callback_data="bot_settings_button" ))
	markup.add(types.InlineKeyboardButton("F.A.Q ‚ùì",callback_data="faq_button" ))
	
	bot.send_message(message.chat.id, "–ß–µ–≥–æ –≤—ã –∂–µ–ª–∞–µ—Ç–µ?", reply_markup = markup)


#PROFILE
@bot.callback_query_handler(func=lambda c: c.data == "profile_button")
def profile(call):
		markup = types.InlineKeyboardMarkup()
		
		markup.add(types.InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å üë§",callback_data="show_profile_button" ))
		markup.add(types.InlineKeyboardButton("–¢–∏–ø —Ä–∞–±–æ—Ç—ã(–§—Ä–∏–ª–∞–Ω—Å, –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞)",callback_data="type_of_work_button"))
		markup.add(types.InlineKeyboardButton("–ì–æ—Ä–æ–¥/–†–µ–≥–∏–æ–Ω üèôÔ∏è",callback_data="city_button"))
		markup.add(types.InlineKeyboardButton("–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è üñ•Ô∏è",callback_data="specialization_button"))
		markup.add(types.InlineKeyboardButton("–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ üí∂",callback_data="desired_salary_button"))
		markup.add(types.InlineKeyboardButton("–ó–Ω–∞–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ",callback_data="knowlege_of_english_button"))
		markup.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚èÆÔ∏è",callback_data="back_to_main_menu_button"))
		
		bot.send_message(call.message.chat.id,"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)




#PROFILE Type of work
@bot.callback_query_handler(func=lambda c: c.data == "type_of_work_button")
def type_of_work_button(call):
	markup = types.InlineKeyboardMarkup(row_width=2)
	
	freelance_button = types.InlineKeyboardButton("–§—Ä–∏–ª–∞–Ω—Å",callback_data = "freelance_button")
	full_time_job_button = types.InlineKeyboardButton("–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞",callback_data="full_time_job_button")
	markup.row(freelance_button,full_time_job_button)
	markup.add(types.InlineKeyboardButton("–ò —Ç–æ –∏ —Ç–æ",callback_data = "freelance_and_full_time_job_button"))
	
	bot.send_message(call.message.chat.id,"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞–º —Ç–∏–ø —Ä–∞–±–æ—Ç—ã:",reply_markup=markup)

@bot.callback_query_handler(func=lambda c: c.data == "freelance_button")
def type_of_work_function(call):
	sql.execute("UPDATE users SET type_of_work == ? WHERE user_id = ?",('–§—Ä–∏–ª–∞–Ω—Å',call.message.chat.id,))
	db.commit()
	bot.send_message(call.message.chat.id,"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
	profile(call)
@bot.callback_query_handler(func=lambda c: c.data == "full_time_job_button")
def type_of_work_function(call):
	sql.execute("UPDATE users SET type_of_work == ? WHERE user_id = ?",('–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞',call.message.chat.id,))
	db.commit()	
	bot.send_message(call.message.chat.id,"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
	profile(call)
@bot.callback_query_handler(func=lambda c: c.data == "freelance_and_full_time_job_button")
def type_of_work_function(call):
	sql.execute("UPDATE users SET type_of_work == ? WHERE user_id = ?",('–ù–µ –≤–∞–∂–Ω–æ',call.message.chat.id,))
	db.commit()
	bot.send_message(call.message.chat.id,"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
	profile(call)


#PROFILE City or region
@bot.callback_query_handler(func=lambda c: c.data == "city_button")
def city_button(call):
	sent = bot.send_message(call.message.chat.id,"–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥/—Ä–µ–≥–∏–æ–Ω\n(–ü—Ä–∏–º–µ—Ä:–°–∞—Ä–∞—Ç–æ–≤)")
	bot.register_next_step_handler(sent,save_city)
def save_city(message):
	sql.execute("UPDATE users SET city == ? WHERE user_id = ?",(message.text,message.chat.id,))
	db.commit()
	bot.send_message(message.chat.id,f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
	

#PROFILE Specialization
@bot.callback_query_handler(func=lambda c: c.data == "specialization_button")
def specialization_button(call):
	sent = bot.send_message(call.message.chat.id,"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é.\n(–ü—Ä–∏–º–µ—Ä: Java junior)")
	bot.register_next_step_handler(sent,save_specialization)
def save_specialization(message):
	sql.execute("UPDATE users SET specialization == ? WHERE user_id = ?",(message.text,message.chat.id,))
	db.commit()
	bot.send_message(message.chat.id,f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")


#PROFILE Desired salary
@bot.callback_query_handler(func=lambda c: c.data == "desired_salary_button")
def desired_salary_button(call):
	sent = bot.send_message(call.message.chat.id,"–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç —Å–∫–æ–ª—å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤–∞—à–∞ –∂–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞/—Ü–µ–Ω–∞ –∑–∞ –≤–∞—à–∏ —É—Å–ª—É–≥–∏ üí∂.\n(–£–∫–∞–∂–∏—Ç–µ –≤ —Ü–∏—Ñ—Ä–∞—Ö –∏ —Ä—É–±–ª—è—Ö, –±–µ–∑ —Ç–æ—á–µ–∫, –∑–∞–ø—è—Ç—ã—Ö –∏–ª–∏ –ø—Ä–æ–±–µ–ª–æ–≤)")
	bot.register_next_step_handler(sent,save_desired_salary)
def save_desired_salary(message):
	sql.execute("UPDATE users SET desired_salary == ? WHERE user_id = ?",(message.text,message.chat.id,))
	db.commit()
	bot.send_message(message.chat.id,f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
	

#PROFILE Knowlege of Enlish
@bot.callback_query_handler(func=lambda c: c.data == "knowlege_of_english_button")
def knowlege_of_english_button(call):
	markup = types.InlineKeyboardMarkup()
	markup.add(types.InlineKeyboardButton("–î–∞",callback_data="knowlege_of_enlish_answer_yes"))
	markup.add(types.InlineKeyboardButton("–ù–µ—Ç",callback_data="knowlege_of_enlish_answer_no"))
	bot.send_message(call.message.chat.id,"–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã –∞–Ω–≥–ª–∏–π—Å–∫–∏–π?",reply_markup=markup)

@bot.callback_query_handler(func=lambda c: c.data == "knowlege_of_enlish_answer_yes")
def knowlege_of_english_function(call):
	sql.execute("UPDATE users SET knowlege_of_english == ? WHERE user_id = ?",('–ï—Å—Ç—å',call.message.chat.id,))
	db.commit()	
	bot.send_message(call.message.chat.id,f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
	profile(call)

@bot.callback_query_handler(func=lambda c: c.data == "knowlege_of_enlish_answer_no")
def knowlege_of_english_function(call):
	sql.execute("UPDATE users SET knowlege_of_english == ? WHERE user_id = ?",('–ù–µ—Ç—É',call.message.chat.id,))
	db.commit()	
	bot.send_message(call.message.chat.id,f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
	profile(call)


#PROFILE Back to main menu
@bot.callback_query_handler(func=lambda c: c.data == "back_to_main_menu_button" )
def back_to_main_menu(call):
	main_menu(call.message)

#PROFILE Show profile
@bot.callback_query_handler(func= lambda c: c.data == "show_profile_button")
def show_profile(call):
	bot.send_message(call.message.chat.id,f"""–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫: 
	–¢–∏–ø —Ä–∞–±–æ—Ç—ã: {sql.execute("SELECT * FROM users WHERE user_id = ?",(call.message.chat.id,)).fetchone()[7]}
	–ì–æ—Ä–æ–¥: {sql.execute("SELECT * FROM users WHERE user_id = ?",(call.message.chat.id,)).fetchone()[8]}
	–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {sql.execute("SELECT * FROM users WHERE user_id = ?",(call.message.chat.id,)).fetchone()[9]}
	–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {sql.execute("SELECT *  FROM users WHERE user_id = ?",(call.message.chat.id,)).fetchone()[10]}
	–ó–Ω–∞–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ: {sql.execute("SELECT * FROM users WHERE user_id = ?",(call.message.chat.id,)).fetchone()[11]} 
	""")
	profile(call)


#FIND ORDERS
@bot.callback_query_handler(func=lambda c: c.data == "find_orders_button")
def find_orders_button(call):
	if check_subcription_status(call):
		find_orders()
		bot.send_message(call.message.chat.id,"Successful")
	else:
		bot.send_message(call.message.chat.id,"–£ –≤–∞—Å –Ω–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –µ—ë –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!")




#BOT SETTINGS
@bot.callback_query_handler(func = lambda c: c.data == "bot_settings_button")
def bot_settings(call):
	markup = types.InlineKeyboardMarkup()

	markup.add(types.InlineKeyboardButton("–†–∞—Å—Å—ã–ª–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π/–∑–∞–∫–∞–∑–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ ü§ñ",callback_data="auto_mailing_status_button" ))
	markup.add(types.InlineKeyboardButton("–ß–∞—Å—Ç–æ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ‚úâÔ∏è",callback_data="message_frequensy_per_day_button"))
	markup.add(types.InlineKeyboardButton("–ö–æ–ª-–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π/–∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ üî¢",callback_data="number_of_orders_per_message_button"))
	markup.add(types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∫–∞ üí∏",callback_data="subcription_status_button"))
	markup.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚èÆÔ∏è",callback_data="back_to_main_menu_button"))
	
	bot.send_message(call.message.chat.id,"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É: ",reply_markup=markup)


#BOT SETTINGS auto_mailing_status
@bot.callback_query_handler(func=lambda c: c.data == "auto_mailing_status_button")
def auto_mailing_status_button(call):
	markup = types.InlineKeyboardMarkup()

	markup.add(types.InlineKeyboardButton("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",callback_data="auto_mailing_status_true"))
	markup.add(types.InlineKeyboardButton("–ü–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",callback_data="auto_mailing_status_false"))

	bot.send_message(call.message.chat.id,"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏: ",reply_markup=markup)

@bot.callback_query_handler(func=lambda c: c.data == "auto_mailing_status_true")
def auto_mailing_status(call):
	sql.execute("UPDATE users SET auto_mailing_status == ? WHERE user_id = ?",(1,call.message.chat.id,))
	db.commit()	
	bot.send_message(call.message.chat.id,f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
	bot_settings(call)

@bot.callback_query_handler(func=lambda c: c.data == "auto_mailing_status_false")
def auto_mailing_status(call):
	sql.execute("UPDATE users SET auto_mailing_status == ? WHERE user_id = ?",(0,call.message.chat.id,))
	db.commit()	
	bot.send_message(call.message.chat.id,f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
	bot_settings(call)


#BOT SETTINGS message_frequensy
@bot.callback_query_handler(func=lambda c: c.data == "message_frequensy_per_day_button")
def message_frequensy_button(call):
	markup = types.InlineKeyboardMarkup()

	markup.add(types.InlineKeyboardButton("1 —Ä–∞–∑ –≤ –¥–µ–Ω—å(–≤ 12 –ø–æ –ú–°–ö)",callback_data="message_frequensy_1_per_day"))
	markup.add(types.InlineKeyboardButton("3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å(6,12,18 –ø–æ –ú–°–ö)",callback_data="message_frequensy_3_per_day"))

	bot.send_message(call.message.chat.id,"–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ: ",reply_markup=markup)

@bot.callback_query_handler(func=lambda c: c.data == "message_frequensy_1_per_day")
def auto_mailing_status(call):
	sql.execute("UPDATE users SET message_frequensy == ? WHERE user_id = ?",(1,call.message.chat.id,))
	db.commit()	
	bot.send_message(call.message.chat.id,f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
	bot_settings(call)

@bot.callback_query_handler(func=lambda c: c.data == "message_frequensy_3_per_day")
def auto_mailing_status(call):
	sql.execute("UPDATE users SET message_frequensy == ? WHERE user_id = ?",(3,call.message.chat.id,))
	db.commit()	
	bot.send_message(call.message.chat.id,f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
	bot_settings(call)


#BOT SETTINGS number of orders per message number_of_orders_per_message
@bot.callback_query_handler(func=lambda c: c.data == "number_of_orders_per_message_button")
def number_of_orders_per_message_button(call):
	markup = types.InlineKeyboardMarkup()

	one_order_per_message_button = types.InlineKeyboardButton("1 –≤–∞–∫–∞–Ω—Å–∏—è/–∑–∞–∫–∞–∑)",callback_data="number_of_orders_per_message_is_one")
	three_orders_per_message_button = types.InlineKeyboardButton("3 –≤–∞–∫–∞–Ω—Å–∏–π/–∑–∞–∫–∞–∑–æ–≤)",callback_data="number_of_orders_per_message_is_three")
	six_orders_per_message_button = types.InlineKeyboardButton("6 –≤–∞–∫–∞–Ω—Å–∏–π/–∑–∞–∫–∞–∑–æ–≤)",callback_data="number_of_orders_per_message_is_six")
	ten_orders_per_message_button = types.InlineKeyboardButton("10 –≤–∞–∫–∞–Ω—Å–∏–π/–∑–∞–∫–∞–∑–æ–≤)",callback_data="number_of_orders_per_message_is_ten")

	markup.row(one_order_per_message_button,three_orders_per_message_button)
	markup.row(six_orders_per_message_button,ten_orders_per_message_button)

	bot.send_message(call.message.chat.id,"–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ: ",reply_markup=markup)

@bot.callback_query_handler(func=lambda c: c.data == "number_of_orders_per_message_is_one")
def number_of_message_per_message(call):
	sql.execute("UPDATE users SET number_of_orders == ? WHERE user_id = ?",(1,call.message.chat.id,))
	db.commit()	
	bot.send_message(call.message.chat.id,f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
	bot_settings(call)

@bot.callback_query_handler(func=lambda c: c.data == "number_of_orders_per_message_is_three")
def number_of_message_per_message(call):
	sql.execute("UPDATE users SET number_of_orders == ? WHERE user_id = ?",(3,call.message.chat.id,))
	db.commit()	
	bot.send_message(call.message.chat.id,f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
	bot_settings(call)

@bot.callback_query_handler(func=lambda c: c.data == "number_of_orders_per_message_is_six")
def number_of_message_per_message(call):
	sql.execute("UPDATE users SET number_of_orders == ? WHERE user_id = ?",(6,call.message.chat.id,))
	db.commit()	
	bot.send_message(call.message.chat.id,f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
	bot_settings(call)

@bot.callback_query_handler(func=lambda c: c.data == "number_of_orders_per_message_is_ten")
def number_of_message_per_message(call):
	sql.execute("UPDATE users SET number_of_orders == ? WHERE user_id = ?",(10,call.message.chat.id,))
	db.commit()	
	bot.send_message(call.message.chat.id,f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
	bot_settings(call)

#BOT SETTINGS subcription status
@bot.callback_query_handler(func=lambda c: c.data == "subcription_status_button")
def subcription_status_button(call):
	if sql.execute("SELECT * FROM users WHERE user_id = ?",(call.message.chat.id,)).fetchone()[2] == 0:
		markup = types.InlineKeyboardMarkup()
		markup.add(types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å",callback_data="payment_button"))
		bot.send_message(call.message.chat.id,'–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞',reply_markup=markup)
		if check_subcription_status(call) == False:
			markup = types.InlineKeyboardMarkup()
			markup.add(types.InlineKeyboardButton("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å",callback_data="trial_subcription_button_yes")) 
			bot.send_message(call.message.chat.id,'–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É?',reply_markup=markup)
		bot_settings(call)
	else:
		until = str(sql.execute('SELECT * FROM users WHERE user_id = ?',(call.message.chat.id,)).fetchone()[3])
		until_text = date(day = int(until[0:2]),month = int(until[2:4]),year=int(until[4:8])).strftime("%d-%m-%Y")
		bot.send_message(call.message.chat.id,'–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ ' + str(until_text))
		bot_settings(call)

#BOT SETTING trial subcription
@bot.callback_query_handler(func=lambda c: c.data == "trial_subcription_button_yes")
def trial_subcription(call):
	today = date.today()
	sql.execute("UPDATE users SET subcription_until == ? WHERE user_id = ?",((today+timedelta(days=7)).strftime("%d%m%Y"),call.message.chat.id))
	sql.execute("UPDATE users SET subcription_status == ? WHERE user_id = ?",(1,call.message.chat.id))
	sql.execute("UPDATE users SET trial_subscription_activation == ? WHERE user_id = ?",(1,call.message.chat.id))
	db.commit()
	until = str(sql.execute('SELECT * FROM users WHERE user_id = ?',(call.message.chat.id,)).fetchone()[3])
	until_text = date(day = int(until[0:2]),month = int(until[2:4]),year=int(until[4:8])).strftime("%d-%m-%Y")
	bot.send_message(call.message.chat.id,"–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∏ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ " + str(until_text))
	bot_settings(call)



#F.A.Q
@bot.callback_query_handler(func=lambda c: c.data == "faq_button")
def faq(call):
	bot.send_message(call.message.chat.id,"""
	Q: –°–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—å—Å—è –ø—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞?
	A: 1 –Ω–µ–¥–µ–ª—é 

	Q:–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –æ–±—ã—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞?
	A: 50 —Ä—É–±–ª–µ–π
	
	Q:–°–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞?
	A:–ü–æ–∫–∞ —á—Ç–æ 1 –º–µ—Å—è—Ü. –í –±—É–¥—É—â–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ä–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã 
	–¥–æ 3 –º–µ—Å—è—Ü–µ–≤,6 –º–µ—Å—è—Ü–µ–≤ –∏ –≥–æ–¥–∞.                                                                 
	
	Q:–ï—Å–ª–∏ –±–æ—Ç —Å–∫–∏–Ω—É–ª —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞–º-–æ–±—ä—è–≤–ª–µ–Ω–∏–µ?
	A:–≠—Ç–æ—Ç –±–æ—Ç –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∞–º–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –µ–≥–æ –∑–∞–¥–∞—á–∞ —Å–æ—Å—Ç–æ–∏—Ç –≤ —Ç–æ–º —á—Ç–æ–±—ã –ø—Ä–æ—Å—Ç–æ —Å–∫–∏–Ω—É—Ç—å –≤–∞–º 
	–ø–æ–¥—Ö–æ–¥—è—â–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –¢–∞–∫ —á—Ç–æ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –≤–¥—Ä—É–≥ –Ω–µ –¥–∞–π –ë–æ–≥ —Å–ª—É—á–∏–ª–æ—Å—å, —Ç–æ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∞–π—Ç–∞.                        
	
	Q: –ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –±–æ—Ç–∞?
	A:–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –æ–± —É–ª—É—á—à–µ–Ω–∏–∏, –∏–ª–∏ –æ—à–∏–±–∫–µ.
	
	Q:–ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π/–∏–ª–∏ –µ—â—ë —á–µ–º-–ª–∏–±–æ
	A: –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ–± –æ—à–∏–±–∫–µ.""")
	
	operation_status = 'success'
	#set_subcription_when_paying(operation_status,call.message)
	subscription_expiration(call.message)
	main_menu(call.message)







	









































bot.infinity_polling()
